/* ------------------------------------------------------------------------------------------------ */

#define MYAPP

#include "MyApp_mAbassi.h"

#include "mAbassi.h"          /* MUST include "SAL.H" and not uAbassi.h        */
#include "Platform.h"         /* Everything about the target platform is here  */
#include "HWinfo.h"           /* Everything about the target hardware is here  */
#include "dw_i2c.h"
#include "dw_uart.h"


/* PROJET */

void Task_dynamixels(void){
	TSKsleep(OS_MS_TO_TICK(100));
	send_packet(0x06, 0x04, 0x03, LED_REG, 1);
	//send_packet(0x06, 0x05, 0x03, GOAL_POSITION_REG, 0x3FF);
}
void send_packet(Byte ID, Byte Length, Byte Instruction, Byte address, uint16_t value){
	uint32_t word_1 = get_packet_1(ID,Length,Instruction,address,value);
	uint32_t word_2 = get_packet_2(address,value);
	alt_write_word(fpga_reset, 1);
	alt_write_word(fpga_reset, 0);
	alt_write_word(fpga_write, 1);
	alt_write_word(fpga_rw_ad, 0b101);
	alt_write_word(fpga_write_data_TX,word_1);
	TSKsleep(OS_MS_TO_TICK(100));
	printf("data1 = %x \n", alt_read_word(fpga_write_data_TX));
	alt_write_word(fpga_rw_ad, 0b110);
	alt_write_word(fpga_write_data_TX,word_2);
	TSKsleep(OS_MS_TO_TICK(100));
	printf("data1 = %x \n", alt_read_word(fpga_write_data_TX));
	alt_write_word(fpga_rw_ad, 0b100);
	TSKsleep(OS_MS_TO_TICK(100));
	alt_write_word(fpga_reset, 0);
	alt_write_word(fpga_write, 0);
	TSKsleep(OS_MS_TO_TICK(1));
}

uint32_t get_packet_1(Byte ID, Byte Length, Byte Instruction, Byte address, uint16_t value){
	Byte P1 = address;
	uint16_t P2 = (value & 0b0000000011111111);
	Byte P3 = value >> 8;
	Byte Checksum = ~(ID + Length + Instruction + P1 + P2 + P3);
	uint32_t word_1 = (Checksum << 24) | (Instruction << 16) | (Length << 8) | (ID);
	return word_1;
}
uint32_t get_packet_2(Byte address, uint16_t value){
	Byte zero = 0;
	Byte P1 = address;
	uint16_t P2 = (value & 0b0000000011111111);
	Byte P3 = value >> 8;
	uint32_t word_2 = (zero << 24) | (P3 << 16) | (P2 << 8) | (P1);
	return word_2;
}

void Task_FPGA_Button(void)

{
    MBX_t    *PrtMbx;
    intptr_t  PtrMsg = (intptr_t) NULL;
    SEM_t    *PtrSem;
    
    PrtMbx = MBXopen("MyMailbox", 128);
    PtrSem = SEMopen("MySemaphore");
    
    for( ;; )
    {
        SEMwait(PtrSem, -1);            // -1 = Infinite blocking
        SEMreset(PtrSem);
        MTXLOCK_STDIO();
        int button = (int) alt_read_word(fpga_buttons) - 1;
        printf("Receive IRQ from Button %d\n", button);  // The Keys O and 1 seem to be inverted somewhere...
        toogle_FPGA_LED(button);
        MTXUNLOCK_STDIO();
        
        MBXput(PrtMbx, PtrMsg, -1);     // -1 = Infinite blocking
    }
}
void spi_CallbackInterrupt (uint32_t icciar, void *context)
{
    // Do something
    MTXLOCK_STDIO();
    printf("INFO: IRQ from SPI : %08x (status = %x)\r\n",
        (unsigned int) alt_read_word(fpga_spi + SPI_RXDATA),
        (unsigned int) alt_read_word(fpga_spi + SPI_STATUS));
    MTXUNLOCK_STDIO();
    alt_write_word(fpga_spi + SPI_TXDATA, 0x113377FF);
    
    // Clear the status of SPI core
    alt_write_word(fpga_spi + SPI_STATUS, 0x00);
}
void button_CallbackInterrupt (uint32_t icciar, void *context)
{
    SEM_t    *PtrSem;
    
    // Clear the interruptmask of PIO core
    alt_write_word(fpga_buttons + PIOinterruptmask, 0x0);
    
    // Enable the interruptmask and edge register of PIO core for new interrupt
    alt_write_word(fpga_buttons + PIOinterruptmask, 0x3);
    alt_write_word(fpga_buttons + PIOedgecapture, 0x3);
    
    PtrSem = SEMopen("MySemaphore");
    SEMpost(PtrSem);
}
void setup_Interrupt( void )
{
    // IRQ from Key0 and Key1
    OSisrInstall(GPT_BUTTON_IRQ, (void *) &button_CallbackInterrupt);
    GICenable(GPT_BUTTON_IRQ, 128, 1);
    
    // Enable interruptmask and edgecapture of PIO core for buttons 0 and 1
    alt_write_word(fpga_buttons + PIOinterruptmask, 0x3);
    alt_write_word(fpga_buttons + PIOedgecapture, 0x3);
    
    // IRQ from SPI slave connected to the RaspberryPI
    OSisrInstall(GPT_SPI_IRQ, (void *) &spi_CallbackInterrupt);
    GICenable(GPT_SPI_IRQ, 128, 1);
    
    // Initialize TXDATA to something (for testing purpose)
    alt_write_word(fpga_spi + SPI_TXDATA, 0x0103070F);
    alt_write_word(fpga_spi + SPI_EOP_VALUE, 0x55AA55AA);
    // Enable interrupt
    alt_write_word(fpga_spi + SPI_CONTROL, SPI_CONTROL_IRRDY + SPI_CONTROL_IE);
}
void setup_hps_gpio()
{
    uint32_t hps_gpio_config_len = 2;
    ALT_GPIO_CONFIG_RECORD_t hps_gpio_config[] = {
        {HPS_LED_IDX  , ALT_GPIO_PIN_OUTPUT, 0, 0, ALT_GPIO_PIN_DEBOUNCE, ALT_GPIO_PIN_DATAZERO},
        {HPS_KEY_N_IDX, ALT_GPIO_PIN_INPUT , 0, 0, ALT_GPIO_PIN_DEBOUNCE, ALT_GPIO_PIN_DATAZERO}
    };
    
    assert(ALT_E_SUCCESS == alt_gpio_init());
    assert(ALT_E_SUCCESS == alt_gpio_group_config(hps_gpio_config, hps_gpio_config_len));
}
void toogle_hps_led()
{
    uint32_t hps_led_value = alt_read_word(ALT_GPIO1_SWPORTA_DR_ADDR);
    hps_led_value >>= HPS_LED_PORT_BIT;
    hps_led_value = !hps_led_value;
    hps_led_value <<= HPS_LED_PORT_BIT;
    alt_gpio_port_data_write(HPS_LED_PORT, HPS_LED_MASK, hps_led_value);
}
