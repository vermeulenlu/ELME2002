
#include "MyApp_mAbassi.h"

#include "mAbassi.h"          /* MUST include "SAL.H" and not uAbassi.h        */
#include "Platform.h"         /* Everything about the target platform is here  */
#include "HWinfo.h"           /* Everything about the target hardware is here  */
#include "dw_i2c.h"
#include "dw_uart.h"
#include "MyDriver_CAN.h"
#include "PID.h"
#include "CtrlStruct.h"
#include <stdio.h>
#include <unistd.h>
#include "odometry.h"
#include "path_planning.h"
#include "Real_localisation.h"
#include "Dynamixels.h"
#include "strategy.h"


#define FINISH 0
#define STOP 1
#define TEST 2
#define ORIENTATION 3
#define RECUL 4
#define CONTOUR 7
#define GO_QG 8
#define GO_BASE 9
#define GO_FLAGS 10
#define CALIB_FLAGS_1 11
#define CALIB_FLAGS_2 12
#define PUT_FLAGS 13
#define ON_THE_WALL 14
/*
Initialisation of the structure
*/
void init_state(CtrlStruct *cvs){
  cvs->strat->state = GO_FLAGS;
  cvs->strat->next_state = GO_FLAGS;
  cvs->strat->t_start = 0;
  cvs->strat->cmd_orient = 0;
}

void update_state(CtrlStruct *cvs)
{
  int res;
  double dt;
  switch (cvs->strat->state)
  {
    case STOP:
    	deploy_flag();
    	speed_regulation(cvs,0.0,0.0);

    case FINISH:
        if(cvs->robot_id == 0 || cvs->robot_id == 1){
          res = planning(cvs, -0.25 , 1.35);
        }
        else{
          res = planning(cvs, -0.25 , -1.35);
        }
        if(res == 1){
          cvs->strat->cmd_orient = 0;
          cvs->strat->next_state = STOP;
          cvs->strat->state = ORIENTATION;
          break;
        }
        break;
    case TEST:
        if(cvs->robot_id == 0 || cvs->robot_id == 1){
          res = planning(cvs, 0.8 , -1.1);
        }
        else{
          res = planning(cvs, -0.1 , 0.0);
        }
        if(res == 1){
          cvs->strat->state = RECUL;
          cvs->strat->next_state = CONTOUR;
          cvs->strat->t_start = alt_read_word(fpga_time);
          break;
        }
        break;
    case RECUL:
        speed_regulation(cvs, -0.2/0.03, -0.2/0.03);
        dt = (alt_read_word(fpga_time) - cvs->strat->t_start)/10000;
        if(dt > 2){
          reploy_shovels();
          push_propDC(0.0, 0.0);
          wait(cvs,1000);
          cvs->strat->state = cvs->strat->next_state;
          break;
        }
        break;
    case CONTOUR:
        res = planning(cvs, -0.7, 0.2);
        if(res == 1){
          deploy_shovels();
          cvs->strat->state = GO_BASE;
          break;
        }
        break;
    case GO_BASE:
        res = planning(cvs, 0.8, -0.3);
        if(res == 1){
          cvs->strat->state = RECUL;
          cvs->strat->next_state = GO_FLAGS;
          cvs->strat->t_start = alt_read_word(fpga_time);
          break;
        }
        break;
    case ORIENTATION:
        if(cvs->robot_id == 0 || cvs->robot_id == 1){
          res = impose_orientation(cvs, cvs->strat->cmd_orient);
        }
        else{
          res = impose_orientation(cvs, cvs->strat->cmd_orient);
        }
        if(res == 1){
          cvs->strat->state = cvs->strat->next_state;
          break;
        }
        break;
    case GO_FLAGS:
        res = planning(cvs, 0.8, -1.3);
        if(res == 1){
          cvs->strat->state = CALIB_FLAGS_1;
          break;
        }
        break;
    case CALIB_FLAGS_1:
        res = impose_orientation(cvs, 90);
        if(res == 1){
            cvs->strat->t_start = alt_read_word(fpga_time);
            cvs->strat->state = ON_THE_WALL;
            break;
        }
        break;
    case ON_THE_WALL:
        dt = (alt_read_word(fpga_time) - cvs->strat->t_start)/10000;
        push_propDC(-15,-15);
        if(dt > 3){
          push_propDC(0,0);
          wait(cvs, 1000);
          cvs->strat->state = CALIB_FLAGS_2;
          break;
        }
        break;
    case CALIB_FLAGS_2:
        res = planning(cvs, 0.6, cvs->real_local->y);
        if(res==1){
          cvs->strat->state = ORIENTATION;
          cvs->strat->cmd_orient = 178;
          cvs->strat->next_state = PUT_FLAGS;
          push_propDC(0,0);
          wait(cvs, 1000);
          cvs->strat->t_start = alt_read_word(fpga_time);
          deploy_right_arm();
          deploy_left_arm();
          break;
        }
        break;
    case PUT_FLAGS:
        dt = (alt_read_word(fpga_time) - cvs->strat->t_start)/10000;
        speed_regulation(cvs, -0.1/0.03, -0.1/0.03);
        if(dt > 6){
          reploy_right_arm();
          reploy_left_arm();
          cvs->strat->state = FINISH;
          break;
        }
        break;
  	default:
  		//printf("Error: unknown state : %d !\n", cvs->state);
  		exit(EXIT_FAILURE);
  }

}


NAMESPACE_CLOSE();
