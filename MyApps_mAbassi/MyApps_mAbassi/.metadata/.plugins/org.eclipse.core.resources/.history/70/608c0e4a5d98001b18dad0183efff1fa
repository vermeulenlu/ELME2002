
#include "MyApp_mAbassi.h"

#include "mAbassi.h"          /* MUST include "SAL.H" and not uAbassi.h        */
#include "Platform.h"         /* Everything about the target platform is here  */
#include "HWinfo.h"           /* Everything about the target hardware is here  */
#include "dw_i2c.h"
#include "dw_uart.h"
#include "MyDriver_CAN.h"
#include "PID.h"
#include "CtrlStruct.h"
#include <stdio.h>
#include <unistd.h>
#include "odometry.h"
#include "path_planning.h"
#include "Real_localisation.h"
#include "Dynamixels.h"
#include "strategy.h"


#define FINISH 0
#define STOP 1
#define TEST 2
#define ORIENTATION 3
#define RECUL 4
#define CONTOUR 7
#define GO_QG 8
#define GO_BASE 9
/*
Initialisation of the structure
*/
void init_state(CtrlStruct *cvs){
  cvs->strat->state = TEST;
  cvs->strat->next_state = TEST;
  cvs->strat->t_start = 0;
}

void update_state(CtrlStruct *cvs)
{
	int res;
  switch (cvs->strat->state)
  {
    case STOP:
      speed_regulation(cvs,0.0,0.0);

    case FINISH:
        if(cvs->robot_id == 0 || cvs->robot_id == 1){
          res = planning(cvs, -0.25 , 1.35);
        }
        else{
          res = planning(cvs, -0.25 , -1.35);
        }
        if(res == 1){
          cvs->strat->state = ORIENTATION;
          break;
        }
        break;
    case TEST:
        if(cvs->robot_id == 0 || cvs->robot_id == 1){
          res = planning(cvs, 0.8 , -1.1);
        }
        else{
          res = planning(cvs, -0.25 , 0.0);
        }
        if(res == 1){
          cvs->strat->state = RECUL;
          cvs->strat->next_state = CONTOUR;
          cvs->strat->t_start = alt_read_word(fpga_time);
          break;
        }
        break;
    case RECUL:
        speed_regulation(cvs, -0.2/0.03, -0.2/0.03);
        double dt = (alt_read_word(fpga_time) - cvs->strat->t_start)/10000;
        if(dt > 2){
          reploy_shovels();
          push_propDC(0.0, 0.0);
          cvs->strat->state = cvs->strat->next_state;
          break;
        }
        break;
    case CONTOUR:
        res = planning(cvs, -0.8, 0.2);
        if(res == 1){
          deploy_shovels();
          cvs->strat->state = GO_BASE;
          break;
        }
        break;
    case GO_BASE:
        res = planning(cvs, 0.8, -0.3);
        if(res == 1){
          cvs->strat->state = RECUL;
          cvs->strat->next_state = FINISH;
          cvs->strat->t_start = alt_read_word(fpga_time);
          break;
        }
        break;
    case ORIENTATION:
        if(cvs->robot_id == 0 || cvs->robot_id == 1){
          res = impose_orientation(cvs, 180);
        }
        else{
          res = impose_orientation(cvs, 0);
        }
        if(res == 1){
          cvs->strat->state = STOP;
          break;
        }
        break;

  	default:
  		//printf("Error: unknown state : %d !\n", cvs->state);
  		exit(EXIT_FAILURE);
  }

}


NAMESPACE_CLOSE();
