#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x1000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x1007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1615919899

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x2000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x2007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x3000
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x300f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 7
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 127

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x4000
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x400f
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x5000
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x500f
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 2
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'spi_raspberrypi', class 'altera_avalon_spi'
 * The macros are prefixed with 'SPI_RASPBERRYPI_'.
 * The prefix is the slave descriptor.
 */
#define SPI_RASPBERRYPI_COMPONENT_TYPE altera_avalon_spi
#define SPI_RASPBERRYPI_COMPONENT_NAME spi_raspberrypi
#define SPI_RASPBERRYPI_BASE 0x6000
#define SPI_RASPBERRYPI_SPAN 32
#define SPI_RASPBERRYPI_END 0x601f
#define SPI_RASPBERRYPI_IRQ 3
#define SPI_RASPBERRYPI_CLOCKMULT 1
#define SPI_RASPBERRYPI_CLOCKPHASE 0
#define SPI_RASPBERRYPI_CLOCKPOLARITY 0
#define SPI_RASPBERRYPI_CLOCKUNITS "Hz"
#define SPI_RASPBERRYPI_DATABITS 32
#define SPI_RASPBERRYPI_DATAWIDTH 32
#define SPI_RASPBERRYPI_DELAYMULT "1.0E-9"
#define SPI_RASPBERRYPI_DELAYUNITS "ns"
#define SPI_RASPBERRYPI_EXTRADELAY 0
#define SPI_RASPBERRYPI_INSERT_SYNC 1
#define SPI_RASPBERRYPI_ISMASTER 0
#define SPI_RASPBERRYPI_LSBFIRST 0
#define SPI_RASPBERRYPI_NUMSLAVES 1
#define SPI_RASPBERRYPI_PREFIX "spi_"
#define SPI_RASPBERRYPI_SYNC_REG_DEPTH 2
#define SPI_RASPBERRYPI_TARGETCLOCK 128000
#define SPI_RASPBERRYPI_TARGETSSDELAY "0.0"

/*
 * Macros for device 'change_frequency_led_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'CHANGE_FREQUENCY_LED_0_'.
 * The prefix is the slave descriptor.
 */
#define CHANGE_FREQUENCY_LED_0_COMPONENT_TYPE altera_avalon_pio
#define CHANGE_FREQUENCY_LED_0_COMPONENT_NAME change_frequency_led_0
#define CHANGE_FREQUENCY_LED_0_BASE 0x7000
#define CHANGE_FREQUENCY_LED_0_SPAN 16
#define CHANGE_FREQUENCY_LED_0_END 0x700f
#define CHANGE_FREQUENCY_LED_0_BIT_CLEARING_EDGE_REGISTER 0
#define CHANGE_FREQUENCY_LED_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CHANGE_FREQUENCY_LED_0_CAPTURE 0
#define CHANGE_FREQUENCY_LED_0_DATA_WIDTH 26
#define CHANGE_FREQUENCY_LED_0_DO_TEST_BENCH_WIRING 0
#define CHANGE_FREQUENCY_LED_0_DRIVEN_SIM_VALUE 0
#define CHANGE_FREQUENCY_LED_0_EDGE_TYPE NONE
#define CHANGE_FREQUENCY_LED_0_FREQ 50000000
#define CHANGE_FREQUENCY_LED_0_HAS_IN 0
#define CHANGE_FREQUENCY_LED_0_HAS_OUT 1
#define CHANGE_FREQUENCY_LED_0_HAS_TRI 0
#define CHANGE_FREQUENCY_LED_0_IRQ_TYPE NONE
#define CHANGE_FREQUENCY_LED_0_RESET_VALUE 24999999

/*
 * Macros for device 'writedata_TXD', class 'altera_avalon_pio'
 * The macros are prefixed with 'WRITEDATA_TXD_'.
 * The prefix is the slave descriptor.
 */
#define WRITEDATA_TXD_COMPONENT_TYPE altera_avalon_pio
#define WRITEDATA_TXD_COMPONENT_NAME writedata_TXD
#define WRITEDATA_TXD_BASE 0x8000
#define WRITEDATA_TXD_SPAN 16
#define WRITEDATA_TXD_END 0x800f
#define WRITEDATA_TXD_BIT_CLEARING_EDGE_REGISTER 0
#define WRITEDATA_TXD_BIT_MODIFYING_OUTPUT_REGISTER 0
#define WRITEDATA_TXD_CAPTURE 0
#define WRITEDATA_TXD_DATA_WIDTH 32
#define WRITEDATA_TXD_DO_TEST_BENCH_WIRING 0
#define WRITEDATA_TXD_DRIVEN_SIM_VALUE 0
#define WRITEDATA_TXD_EDGE_TYPE NONE
#define WRITEDATA_TXD_FREQ 50000000
#define WRITEDATA_TXD_HAS_IN 0
#define WRITEDATA_TXD_HAS_OUT 1
#define WRITEDATA_TXD_HAS_TRI 0
#define WRITEDATA_TXD_IRQ_TYPE NONE
#define WRITEDATA_TXD_RESET_VALUE 0

/*
 * Macros for device 'readdata_RXD', class 'altera_avalon_pio'
 * The macros are prefixed with 'READDATA_RXD_'.
 * The prefix is the slave descriptor.
 */
#define READDATA_RXD_COMPONENT_TYPE altera_avalon_pio
#define READDATA_RXD_COMPONENT_NAME readdata_RXD
#define READDATA_RXD_BASE 0x8010
#define READDATA_RXD_SPAN 16
#define READDATA_RXD_END 0x801f
#define READDATA_RXD_BIT_CLEARING_EDGE_REGISTER 0
#define READDATA_RXD_BIT_MODIFYING_OUTPUT_REGISTER 0
#define READDATA_RXD_CAPTURE 0
#define READDATA_RXD_DATA_WIDTH 32
#define READDATA_RXD_DO_TEST_BENCH_WIRING 0
#define READDATA_RXD_DRIVEN_SIM_VALUE 0
#define READDATA_RXD_EDGE_TYPE NONE
#define READDATA_RXD_FREQ 50000000
#define READDATA_RXD_HAS_IN 1
#define READDATA_RXD_HAS_OUT 0
#define READDATA_RXD_HAS_TRI 0
#define READDATA_RXD_IRQ_TYPE NONE
#define READDATA_RXD_RESET_VALUE 0

/*
 * Macros for device 'address', class 'altera_avalon_pio'
 * The macros are prefixed with 'ADDRESS_'.
 * The prefix is the slave descriptor.
 */
#define ADDRESS_COMPONENT_TYPE altera_avalon_pio
#define ADDRESS_COMPONENT_NAME address
#define ADDRESS_BASE 0x8020
#define ADDRESS_SPAN 16
#define ADDRESS_END 0x802f
#define ADDRESS_BIT_CLEARING_EDGE_REGISTER 0
#define ADDRESS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ADDRESS_CAPTURE 0
#define ADDRESS_DATA_WIDTH 3
#define ADDRESS_DO_TEST_BENCH_WIRING 0
#define ADDRESS_DRIVEN_SIM_VALUE 0
#define ADDRESS_EDGE_TYPE NONE
#define ADDRESS_FREQ 50000000
#define ADDRESS_HAS_IN 0
#define ADDRESS_HAS_OUT 1
#define ADDRESS_HAS_TRI 0
#define ADDRESS_IRQ_TYPE NONE
#define ADDRESS_RESET_VALUE 0

/*
 * Macros for device 'write', class 'altera_avalon_pio'
 * The macros are prefixed with 'WRITE_'.
 * The prefix is the slave descriptor.
 */
#define WRITE_COMPONENT_TYPE altera_avalon_pio
#define WRITE_COMPONENT_NAME write
#define WRITE_BASE 0x8030
#define WRITE_SPAN 16
#define WRITE_END 0x803f
#define WRITE_BIT_CLEARING_EDGE_REGISTER 0
#define WRITE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define WRITE_CAPTURE 0
#define WRITE_DATA_WIDTH 1
#define WRITE_DO_TEST_BENCH_WIRING 0
#define WRITE_DRIVEN_SIM_VALUE 0
#define WRITE_EDGE_TYPE NONE
#define WRITE_FREQ 50000000
#define WRITE_HAS_IN 0
#define WRITE_HAS_OUT 1
#define WRITE_HAS_TRI 0
#define WRITE_IRQ_TYPE NONE
#define WRITE_RESET_VALUE 0

/*
 * Macros for device 'read', class 'altera_avalon_pio'
 * The macros are prefixed with 'READ_'.
 * The prefix is the slave descriptor.
 */
#define READ_COMPONENT_TYPE altera_avalon_pio
#define READ_COMPONENT_NAME read
#define READ_BASE 0x8040
#define READ_SPAN 16
#define READ_END 0x804f
#define READ_BIT_CLEARING_EDGE_REGISTER 0
#define READ_BIT_MODIFYING_OUTPUT_REGISTER 0
#define READ_CAPTURE 0
#define READ_DATA_WIDTH 1
#define READ_DO_TEST_BENCH_WIRING 0
#define READ_DRIVEN_SIM_VALUE 0
#define READ_EDGE_TYPE NONE
#define READ_FREQ 50000000
#define READ_HAS_IN 0
#define READ_HAS_OUT 1
#define READ_HAS_TRI 0
#define READ_IRQ_TYPE NONE
#define READ_RESET_VALUE 0

/*
 * Macros for device 'clk_HPS', class 'altera_avalon_pio'
 * The macros are prefixed with 'CLK_HPS_'.
 * The prefix is the slave descriptor.
 */
#define CLK_HPS_COMPONENT_TYPE altera_avalon_pio
#define CLK_HPS_COMPONENT_NAME clk_HPS
#define CLK_HPS_BASE 0x8050
#define CLK_HPS_SPAN 16
#define CLK_HPS_END 0x805f
#define CLK_HPS_BIT_CLEARING_EDGE_REGISTER 0
#define CLK_HPS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CLK_HPS_CAPTURE 0
#define CLK_HPS_DATA_WIDTH 1
#define CLK_HPS_DO_TEST_BENCH_WIRING 0
#define CLK_HPS_DRIVEN_SIM_VALUE 0
#define CLK_HPS_EDGE_TYPE NONE
#define CLK_HPS_FREQ 50000000
#define CLK_HPS_HAS_IN 0
#define CLK_HPS_HAS_OUT 1
#define CLK_HPS_HAS_TRI 0
#define CLK_HPS_IRQ_TYPE NONE
#define CLK_HPS_RESET_VALUE 0

/*
 * Macros for device 'speed_left', class 'altera_avalon_pio'
 * The macros are prefixed with 'SPEED_LEFT_'.
 * The prefix is the slave descriptor.
 */
#define SPEED_LEFT_COMPONENT_TYPE altera_avalon_pio
#define SPEED_LEFT_COMPONENT_NAME speed_left
#define SPEED_LEFT_BASE 0x8060
#define SPEED_LEFT_SPAN 16
#define SPEED_LEFT_END 0x806f
#define SPEED_LEFT_BIT_CLEARING_EDGE_REGISTER 0
#define SPEED_LEFT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SPEED_LEFT_CAPTURE 0
#define SPEED_LEFT_DATA_WIDTH 32
#define SPEED_LEFT_DO_TEST_BENCH_WIRING 0
#define SPEED_LEFT_DRIVEN_SIM_VALUE 0
#define SPEED_LEFT_EDGE_TYPE NONE
#define SPEED_LEFT_FREQ 50000000
#define SPEED_LEFT_HAS_IN 1
#define SPEED_LEFT_HAS_OUT 0
#define SPEED_LEFT_HAS_TRI 0
#define SPEED_LEFT_IRQ_TYPE NONE
#define SPEED_LEFT_RESET_VALUE 0

/*
 * Macros for device 'speed_right', class 'altera_avalon_pio'
 * The macros are prefixed with 'SPEED_RIGHT_'.
 * The prefix is the slave descriptor.
 */
#define SPEED_RIGHT_COMPONENT_TYPE altera_avalon_pio
#define SPEED_RIGHT_COMPONENT_NAME speed_right
#define SPEED_RIGHT_BASE 0x8070
#define SPEED_RIGHT_SPAN 16
#define SPEED_RIGHT_END 0x807f
#define SPEED_RIGHT_BIT_CLEARING_EDGE_REGISTER 0
#define SPEED_RIGHT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SPEED_RIGHT_CAPTURE 0
#define SPEED_RIGHT_DATA_WIDTH 32
#define SPEED_RIGHT_DO_TEST_BENCH_WIRING 0
#define SPEED_RIGHT_DRIVEN_SIM_VALUE 0
#define SPEED_RIGHT_EDGE_TYPE NONE
#define SPEED_RIGHT_FREQ 50000000
#define SPEED_RIGHT_HAS_IN 1
#define SPEED_RIGHT_HAS_OUT 0
#define SPEED_RIGHT_HAS_TRI 0
#define SPEED_RIGHT_IRQ_TYPE NONE
#define SPEED_RIGHT_RESET_VALUE 0

/*
 * Macros for device 'pio_timer', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_TIMER_'.
 * The prefix is the slave descriptor.
 */
#define PIO_TIMER_COMPONENT_TYPE altera_avalon_pio
#define PIO_TIMER_COMPONENT_NAME pio_timer
#define PIO_TIMER_BASE 0x8080
#define PIO_TIMER_SPAN 16
#define PIO_TIMER_END 0x808f
#define PIO_TIMER_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_TIMER_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_TIMER_CAPTURE 0
#define PIO_TIMER_DATA_WIDTH 32
#define PIO_TIMER_DO_TEST_BENCH_WIRING 0
#define PIO_TIMER_DRIVEN_SIM_VALUE 0
#define PIO_TIMER_EDGE_TYPE NONE
#define PIO_TIMER_FREQ 50000000
#define PIO_TIMER_HAS_IN 1
#define PIO_TIMER_HAS_OUT 0
#define PIO_TIMER_HAS_TRI 0
#define PIO_TIMER_IRQ_TYPE NONE
#define PIO_TIMER_RESET_VALUE 0

/*
 * Macros for device 'ILC', class 'interrupt_latency_counter'
 * The macros are prefixed with 'ILC_'.
 * The prefix is the slave descriptor.
 */
#define ILC_COMPONENT_TYPE interrupt_latency_counter
#define ILC_COMPONENT_NAME ILC
#define ILC_BASE 0x30000
#define ILC_SPAN 256
#define ILC_END 0x300ff


#endif /* _ALTERA_HPS_0_H_ */
